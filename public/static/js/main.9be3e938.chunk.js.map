{"version":3,"sources":["helpers/sessionKontrol.js","Components/SiparisListe.js","Components/SiparisEkle.js","Components/Giris.js","App.js","serviceWorker.js","index.js"],"names":["Promise","resolve","reject","axios","url","method","then","res","data","girisYapilmadi","catch","e","SiparisListe","state","sayfa","siparisler","this","props","className","Table","stickyHeader","TableHead","TableRow","TableCell","TableBody","preEnterPose","length","sort","a","b","aDate","Date","eklenmeTarihi","map","siparis","i","eklenmeZaman","toLocaleTimeString","toLocaleDateString","day","month","year","SiparisRow","key","adSoyad","aciklama","kargoAdresi","toplamFiyat","toLocaleString","minimumFractionDigits","maximumFractionDigits","TableFooter","Component","posed","tr","init","opacity","enter","exit","SiparisEkle","ekle","values","resetForm","siparisEkle","initialValues","validationSchema","Yup","shape","required","max","onSubmit","handleChange","handleSubmit","errors","touched","setFieldTouched","style","flexDirection","Object","keys","error","textAlign","color","TextField","flex","name","label","variant","onChange","value","type","autoComplete","multiline","rows","rowsMax","Button","onClick","Giris","giris","girisYap","kullaniciAdi","kullaniciSifre","on","App","yuklendi","baslik","Card","render","location","RouteContainer","exact","path","component","React","GirisYap","bilgiler","history","push","console","sessionKontrol","Siparisler","siparisleriCek","setState","cikis","window","reload","log","div","x","delay","beforeChildren","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9be3e938.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default () => new Promise((resolve, reject) => {\r\n    axios({\r\n        url:\"/api/giriskontrol\",\r\n        method:\"get\",\r\n    })\r\n        .then(res => {\r\n            if(res.data.girisYapilmadi)\r\n                reject(false);\r\n            else\r\n                resolve(res.data)\r\n        })\r\n        .catch(e => reject(e));\r\n});","import React, {Component} from 'react';\r\nimport {Table, TableHead, TableBody, TableRow, TableCell, TablePagination, TableFooter} from '@material-ui/core';\r\nimport posed, { PoseGroup } from \"react-pose\";\r\n\r\nclass SiparisListe extends Component {\r\n\r\n    state = { /// pagination yapılacak\r\n        sayfa: 1,\r\n\r\n    };\r\n\r\n    render() {\r\n\r\n        const { siparisler } = this.props;\r\n\r\n        return (\r\n            <div className={\"siparisListe\"}>\r\n                <Table stickyHeader>\r\n                    <TableHead className={\"siparisListeHead\"}>\r\n                        <TableRow>\r\n                            <TableCell className={\"adSoyad\"}>Ad Soyad</TableCell>\r\n                            <TableCell className={\"aciklama\"}>Açıklama</TableCell>\r\n                            <TableCell className={\"kargoAdresi\"}>Kargo Adresi</TableCell>\r\n                            <TableCell className={\"toplamFiyat\"}>Toplam Fiyat</TableCell>\r\n                            <TableCell className={\"eklenmeTarihi\"}>Eklenme Tarihi</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody className={\"siparisListeBody\"}>\r\n                        <PoseGroup preEnterPose={\"init\"}>\r\n                            {\r\n                                siparisler.length && (\r\n                                    siparisler.sort((a,b) => {\r\n                                        const aDate = new Date(a.eklenmeTarihi);\r\n                                        const bDate = new Date(b.eklenmeTarihi);\r\n                                        return bDate - aDate;\r\n                                    })\r\n                                        .map((siparis,i) => {\r\n\r\n                                            let eklenmeTarihi = new Date(siparis.eklenmeTarihi);\r\n                                            let eklenmeZaman = eklenmeTarihi.toLocaleTimeString(\"tr\");\r\n                                            eklenmeTarihi = eklenmeTarihi.toLocaleDateString(\"tr\", { day:\"numeric\", month:\"long\", year: \"numeric\" });\r\n                                            return(\r\n                                                <SiparisRow key={i}>\r\n                                                    <TableCell>{siparis.adSoyad}</TableCell>\r\n                                                    <TableCell>{siparis.aciklama}</TableCell>\r\n                                                    <TableCell>{siparis.kargoAdresi}</TableCell>\r\n                                                    <TableCell><b>{siparis.toplamFiyat.toLocaleString(\"tr\", { minimumFractionDigits:2, maximumFractionDigits:2 })} <i className={\"fa fa-turkish-lira\"} /></b></TableCell>\r\n                                                    <TableCell>{eklenmeZaman} <br/> {eklenmeTarihi}</TableCell>\r\n                                                </SiparisRow>\r\n                                            )\r\n                                        })\r\n                                )\r\n                            }\r\n                        </PoseGroup>\r\n                    </TableBody>\r\n                    <TableFooter />\r\n                </Table>\r\n                {\r\n                    !siparisler.length &&\r\n                    <h2 key={\"siparisBulunamadı\"} className={\"siparisBulunamadı\"}>Sipariş bulunamadı1</h2>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SiparisListe;\r\n\r\nconst SiparisRow = posed.tr({\r\n    init: {\r\n        opacity:0,\r\n    },\r\n    enter: {\r\n        opacity:1,\r\n    },\r\n    exit: {\r\n        opacity:0,\r\n    }\r\n});","import React, {Component} from 'react';\r\nimport { TextField, Button, TableRow,  } from \"@material-ui/core\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from 'yup';\r\n\r\nclass SiparisEkle extends Component {\r\n\r\n    ekle = (values, resetForm) => {\r\n        this.props.siparisEkle(values);\r\n        resetForm();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className={\"siparisEkle\"}>\r\n                <Formik\r\n                    initialValues={{\r\n                        adSoyad: \"\",\r\n                        toplamFiyat: \"\",\r\n                        aciklama: \"\",\r\n                        kargoAdresi: \"\",\r\n                    }}\r\n                    validationSchema={() => Yup.object().shape({\r\n                        adSoyad: Yup.string().required(\"(Ad Soyad) Bu alan zorunludur!\"),\r\n                        toplamFiyat: Yup.number(\"(Toplam Fiyat) Geçersiz veri türü girildi!\").required(\"(Toplam Fiyat) Bu alan zorunludur!\"),\r\n                        aciklama: Yup.string().max(255, \"(Açıklama) Maksimum karakter sayısı geçildi!\"),\r\n                        kargoAdresi: Yup.string().max(255, \"(Kargo Adresi) Maksimum karakter sayısı geçildi!\"),\r\n                    })}\r\n                    onSubmit={(values, {resetForm}) => this.ekle(values, resetForm)}\r\n                >\r\n                    {({values, handleChange, handleSubmit, errors, touched, setFieldTouched}) =>\r\n                        <form onSubmit={handleSubmit}>\r\n                            {\r\n                                errors &&\r\n                                    <TableRow style={{flexDirection:\"column\"}}>\r\n                                        {\r\n                                            Object.keys(errors).map((error, key) =>\r\n                                                touched[error] &&\r\n                                                    <h3 style={{textAlign:\"center\", color:\"red\"}} key={key}>{errors[error]}</h3>\r\n                                            )\r\n                                        }\r\n                                    </TableRow>\r\n                            }\r\n                            <TableRow>\r\n                                <TextField\r\n                                    style={{ flex:40 }}\r\n                                    className={\"siparisEkleInput\"}\r\n                                    name={\"adSoyad\"}\r\n                                    label=\"Ad Soyad\"\r\n                                    variant=\"outlined\"\r\n                                    onChange={handleChange('adSoyad')}\r\n                                    value={values.adSoyad}\r\n                                />\r\n                                <div style={{flex:1}}>\r\n                                </div>\r\n                                <TextField\r\n                                    style={{ flex:40 }}\r\n                                    className={\"siparisEkleInput\"}\r\n                                    name={\"toplamFiyat\"}\r\n                                    type={\"number\"}\r\n                                    label=\"Toplam Fiyat\"\r\n                                    autoComplete={\"no\"}\r\n                                    variant=\"outlined\"\r\n                                    onChange={handleChange('toplamFiyat')}\r\n                                    value={values.toplamFiyat}\r\n                                />\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TextField\r\n                                    style={{ flex:1 }}\r\n                                    className={\"siparisEkleInput\"}\r\n                                    name={\"aciklama\"}\r\n                                    label=\"Açıklama\"\r\n                                    variant=\"outlined\"\r\n                                    onChange={handleChange('aciklama')}\r\n                                    value={values.aciklama}\r\n                                    multiline={true}\r\n                                    rows={1}\r\n                                    rowsMax={4}\r\n                                />\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TextField\r\n                                    style={{ flex:1 }}\r\n                                    className={\"siparisEkleInput\"}\r\n                                    name={\"kargoAdresi\"}\r\n                                    label=\"Kargo Adresi\"\r\n                                    variant=\"outlined\"\r\n                                    onChange={handleChange('kargoAdresi')}\r\n                                    value={values.kargoAdresi}\r\n                                    multiline={true}\r\n                                    rows={1}\r\n                                    rowsMax={4}\r\n                                />\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <Button\r\n                                    onClick={handleSubmit}\r\n                                    style={{ flex:1 }}\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                >\r\n                                    <i className={\"fa fa-plus\"} />&nbsp;Ekle\r\n                                </Button>\r\n                            </TableRow>\r\n                        </form>\r\n                    }\r\n                </Formik>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SiparisEkle;","import React, {Component} from 'react';\r\nimport { TextField, Button, TableRow,  } from \"@material-ui/core\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from 'yup';\r\n\r\nclass Giris extends Component {\r\n\r\n    giris = values => {\r\n        this.props.girisYap(values);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className={\"girisYap\"}>\r\n                <Formik\r\n                    initialValues={{\r\n                        kullaniciAdi:\"\",\r\n                        kullaniciSifre:\"\"\r\n                    }}\r\n                    validationSchema={() => Yup.object().shape({\r\n                        kullaniciAdi: Yup.string().required(\"Kullanıcı adınızı girin!\"),\r\n                        kullaniciSifre: Yup.string().required(\"Şifrenizi girin!\")\r\n                    })}\r\n                    onSubmit={values => this.giris(values)}\r\n                >\r\n                    {({values, handleChange, handleSubmit, errors, touched, setFieldTouched}) =>\r\n                        <form onSubmit={handleSubmit}>\r\n                            <h3><i className={\"fa fa-user\"}/> Giriş Yap</h3>\r\n                            {\r\n                                errors.kullaniciAdi && touched.kullaniciAdi &&\r\n                                    <span className=\"girisUyari\">{errors.kullaniciAdi}</span>\r\n                            }\r\n                            <TextField\r\n                                style={{ flex:1 }}\r\n                                className={\"girisInput\"}\r\n                                label=\"Kullanıcı Adı\"\r\n                                variant=\"outlined\"\r\n                                onChange={handleChange('kullaniciAdi')}\r\n                            />\r\n                            {\r\n                                errors.kullaniciSifre && touched.kullaniciSifre &&\r\n                                <span className=\"girisUyari\">{errors.kullaniciSifre}</span>\r\n                            }\r\n                            <TextField\r\n                                style={{ flex:1 }}\r\n                                className={\"girisInput\"}\r\n                                label=\"Şifre\"\r\n                                type={\"password\"}\r\n                                variant=\"outlined\"\r\n                                onChange={handleChange('kullaniciSifre')}\r\n                                onSubmit={handleSubmit}\r\n                                on\r\n                            />\r\n                            <Button\r\n                                onClick={handleSubmit}\r\n                                style={{ flex:1 }}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={\"girisButon\"}\r\n                            >\r\n                                <i className={\"fa fa-sign-in\"} />&nbsp;Giriş\r\n                            </Button>\r\n                        </form>\r\n                    }\r\n                </Formik>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Giris;","import React from 'react';\nimport './style.css';\nimport axios from 'axios';\nimport { Card, Button } from \"@material-ui/core\";\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport posed, {PoseGroup} from \"react-pose\";\nimport sessionKontrol from \"./helpers/sessionKontrol\";\n\n// components\nimport SiparisListe from './Components/SiparisListe';\nimport SiparisEkle from \"./Components/SiparisEkle\";\nimport Giris from \"./Components/Giris\";\n\nclass App extends React.Component{\n\n    state = {\n        yuklendi: false,\n    };\n\n    componentDidMount() {\n\n    };\n\n    render(){\n\n        const { baslik } = this.state;\n\n        return (\n                <Card className={\"container\"}>\n                    <Route render={({location}) => (\n                        <PoseGroup>\n                            <RouteContainer className={\"routeContainer\"} key={\"location.key\"}>\n                                <Switch location={location}>\n                                    <Route exact path={\"/\"} key={\"siparisler\"} component={props => <Siparisler {...props} siparisEkle={this.siparisEkle} />} />\n                                    <Route exact path={\"/giris\"} key={\"giris\"} component={props => <GirisYap {...props} girisYap={this.girisYap} />} />\n                                </Switch>\n                            </RouteContainer>\n                        </PoseGroup>\n                    )}/>\n                </Card>\n        );\n    }\n}\n\nexport default App;\n\nclass GirisYap extends React.Component{\n\n    componentDidMount() {\n        sessionKontrol()\n            .then(data => {\n                this.props.history.push(\"/\")\n            })\n            .catch(e => {});\n    }\n\n    girisYap = async bilgiler => {\n        try{\n            const {data:siparisEkle} = await axios({ url:\"/api/giris\", method:\"post\", data:bilgiler });\n            this.props.history.push(\"/\");\n        }catch (e) {\n            console.error(e);\n        }\n    };\n\n    render(){\n        return(\n            <Giris {...this.props} girisYap={this.girisYap} />\n        )\n    }\n}\n\nclass Siparisler extends React.Component{\n\n    state = {\n        siparisler: []\n    };\n\n    componentDidMount() {\n        sessionKontrol()\n            .then(data => {\n                console.log({data});\n                this.siparisleriCek();\n            })\n            .catch(e => this.props.history.push(\"/giris\"));\n    }\n\n    siparisleriCek = async() => {\n        try{\n            const {data:siparisler} = await axios({ url:\"/api/siparis\", method:\"get\" });\n            this.setState({ siparisler });\n        }catch (e) {\n            console.error(e);\n        }\n    };\n\n    siparisEkle = async siparis => {\n        try{\n            await sessionKontrol();\n            const {data:siparisEkle} = await axios({ url:\"/api/siparis/ekle\", method:\"post\", data:siparis });\n            this.siparisleriCek();\n        }catch (e) {\n            console.error(e);\n            this.props.history.push(\"/giris\")\n        }\n    };\n\n    cikis = async() => {\n        try{\n            await axios({ url: \"/api/cikis\", method:\"post\" });\n            this.props.history.push(\"/giris\");\n        }catch (e) {\n            console.error(e);\n            window.location.reload(true);\n        }\n    }\n\n    render(){\n        return(\n            <>\n                <div className={\"baslik\"}>\n                    <h3><i className={\"fa fa-list\"}/> SİPARİŞ LİSTEM</h3>\n                    <Button\n                        onClick={this.cikis}\n                        //variant={\"contained\"}\n                        color={\"primary\"}\n                    >\n                        <i className={\"fa fa-sign-out\"}/>&nbsp;Çıkış\n                    </Button>\n                </div>\n                <SiparisEkle siparisEkle={this.siparisEkle} />\n                <SiparisListe siparisler={this.state.siparisler} />\n            </>\n        )\n    }\n}\n\nconst RouteContainer = posed.div({\n    enter: { opacity: 1, x:0, delay: 300, beforeChildren: true },\n    exit: { opacity: 0, x:\"-100%\" }\n});","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nReactDOM.render(<BrowserRouter>\n    <Route render={props => <App {...props} />} />\n</BrowserRouter>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}